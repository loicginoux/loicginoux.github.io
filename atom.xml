<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Loic Ginoux Blog]]></title>
  <link href="http://loicginoux.github.io/atom.xml" rel="self"/>
  <link href="http://loicginoux.github.io/"/>
  <updated>2014-06-26T12:16:56+02:00</updated>
  <id>http://loicginoux.github.io/</id>
  <author>
    <name><![CDATA[LoÃ¯c Ginoux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[elastic search and Ruby on Rails example application]]></title>
    <link href="http://loicginoux.github.io/blog/2014/06/26/elastic-search-and-ruby-on-rails-example-application/"/>
    <updated>2014-06-26T11:29:00+02:00</updated>
    <id>http://loicginoux.github.io/blog/2014/06/26/elastic-search-and-ruby-on-rails-example-application</id>
    <content type="html"><![CDATA[<p>I realised I didn&rsquo;t have any project I could show when people where asking if I knew how to use elastic search. I have just done a really small application to show what this tool has to offer.</p>

<!-- more -->


<p>Elastic Search is a powerfull solution for full text search that will propbably the best fit if your application needs to have good search capabilities.</p>

<p>If you need to implement a search page, this is fast, scalable and really easy to use and integrate with a Rails application.</p>

<p>If you need advises or you want to implement this kind of solution, you can send me an email and we will discuss your needs.</p>

<p>the code is on github: <a href="https://github.com/loicginoux/example_elastic_search">https://github.com/loicginoux/example_elastic_search</a></p>

<p>the demo application is visible on heroku: <a href="http://es-example.herokuapp.com/">http://es-example.herokuapp.com/</a></p>

<p>It includes the following features:</p>

<p>-  Full text search</p>

<p>-  when searching, ajax updates of the list of products and highlights of the search key.</p>

<p>-  faceted filtering</p>

<p>-  pagination</p>

<p>And here are 2 screenshots of the app:</p>

<p>the defaut view:</p>

<p><img class="left" src="http://loicginoux.github.io/images/posts/elastic-search-app/products_catalog.png" width="650" title="image" alt="screenshot 1"></p>

<p>View after searching for the word &ldquo;camera&rdquo;:</p>

<p><img class="left" src="http://loicginoux.github.io/images/posts/elastic-search-app/products_catalog_2.png" width="650" title="image" alt="screenshot 2"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Oauth2.0 authorisation framework]]></title>
    <link href="http://loicginoux.github.io/blog/2014/03/20/introduction-to-oauth2-dot-0-protocol/"/>
    <updated>2014-03-20T11:41:43+01:00</updated>
    <id>http://loicginoux.github.io/blog/2014/03/20/introduction-to-oauth2-dot-0-protocol</id>
    <content type="html"><![CDATA[<p>There are different protocols and frameworks for authorizing a third party application to access restricted content but the most recent and the one that most social websites use is the Oauth2.0 protocol.</p>

<!-- more -->


<p>This is a complete different protocol as Oauth v1 so be carefull when you are are reading about Oauth and know which version the article is talking about.
Authentication seems complicated when first approached and I just want to share here an easy summary to understand how this works.</p>

<h2>Use cases</h2>

<p>You will find 2 main use cases as a developer:</p>

<p>- A web application (an Oauth client) will add to its registration/login process a way to login via a more reliable service (a Oauth provider) like Facebook, Twitter, etc..</p>

<p>- An application (a provider) wants to open its API so that other third party applications (clients) can make requests to its API in a secure and authenicated way and without having to store the user&rsquo;s credentials of the provider application.</p>

<h2>Roles</h2>

<p>There are two main roles involved in this communication.</p>

<p>- <strong> the client </strong> : a complete different application that need access to another external API.</p>

<p>- <strong> the provider </strong>: the application that provide the API or the one that you use to authenticate (think about Facebook authentication for example). It also manages which applications is allowed to access the different resources. The provider is usually the same server but it can be separated into 3 different servers: <strong> the resource owner </strong> that contains protected content or resource. This owner will allow access to resources (photos, pages, API, etc&hellip;) hosted on the <strong> resource server </strong>, <strong> the authorisation server </strong> will issue the access to client applications with the approval of the resource owner.</p>

<h2>Protocol</h2>

<p><img src="http://loicginoux.github.io/images/posts/oauth20.jpg" alt="Oauth2.0 protocol" /></p>

<p>(A)  The client requests authorisation from the resource owner. The authorisation request can be made directly to the resource owner (as shown), or preferably indirectly via the authorisation server as an intermediary. It is basically the process happening when an application redirects you to the Facebook site and ask you permission to do some actions with your Facebook account. The framework allows you to specify a <strong> scope </strong> which will restrict the client application acess. For example a basic facebook scope could be reading your name and getting your photo while a write scope could be the possibility to let the client publish posts on your facebook account.</p>

<p> (B)  The client receives an authorisation grant, There are 4 types of grants (<a href="http://tools.ietf.org/html/rfc6749#section-1.3">described here</a>). In this introduction, we see only the authorisation code. So the provider sends back to the app an authentication token representing the resource owner&rsquo;s authorisation.</p>

<p> &copy;  The client requests an access token by authenticating with the authorisation server and sending the authorisation code granted.</p>

<p> (D)  The authorisation server authenticates the client and validates the authorisation grant, and if valid, issues an access token.</p>

<p> (E)  The client requests the protected resource from the resource server and authenticates by presenting the access token. At this time you can access the provider API with the acess token only, there is no need to know the user&rsquo;s credentials.</p>

<p> (F)  The resource server validates the access token, and if valid, serves the request.</p>

<h2>The acess token</h2>

<p>This token is usually a hash string used to access restricted resources. It has a specific expiry period and access scope. It may be restricted to a specific user.</p>

<h2>The refresh token</h2>

<p>Depending on the implementation of the provider, You will have two choices when the acess token has expired. If no refresh token has been provided, you need to restart the authentication process from the point &copy;. In the other hand, the provider can also send at the point (D) not only the acess token but also the refresh token. In this last case, this token is used to obtain a new access token when the current access token becomes invalid or expires.</p>

<p><img src="http://loicginoux.github.io/images/posts/oauth_refresh_20.png" alt="Oauth2.0 refreshing an acess token" /></p>

<h2>Oauth 2.0 is not for authentication</h2>

<p>I just want to clarify one point which is sometimes misunderstood. This is an <strong> AUTHORISATION </strong> framework. It is not an authentication framework. It means that the provider allows you, as a client, to use some of its resources, in a controlled way. You will not be allowed to authenticate to the provider app using the acess token.</p>

<h2>Your job as a developer</h2>

<p>As a developer, you will have 2 different jobs when dealing with this authorisation framework.</p>

<p>- implementing the client app. You will have to register your application into the provider app. For example for the Facebook provider it&rsquo;s on <a href="https://developers.facebook.com/apps">this page</a>. It will gives you an app id and secret key. These are kept into yout application and will allow you to grant authorisation from the provider. You will probably also have to provide a callback URL, which is a the url the provider will redirect you when granted authorisation. As a RoR developers, the gem Omniauth is the best way to go.</p>

<p>- implementing the provider. You will need to create the pages for managing the client applications and restrict your API to be used with acess token authenication. All this is quite easy to do in Rails with the well documented gem Doorkeeper.</p>

<p>I hope you see a bit more clearly into this authorisation process but you should refer to the spec for more details.</p>

<h3>sources</h3>

<p><a href="http://tools.ietf.org/html/rfc6749">Oauth2.0 specifications</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gemfile bootstrap]]></title>
    <link href="http://loicginoux.github.io/blog/2014/02/28/gemfile-bootstrap/"/>
    <updated>2014-02-28T10:47:27+01:00</updated>
    <id>http://loicginoux.github.io/blog/2014/02/28/gemfile-bootstrap</id>
    <content type="html"><![CDATA[<p>I will just keep here a list of gems I like to use in my Ruby on Rails projects.</p>

<!-- more -->


<p>There are so many good gems out there I usually forget some of them when starting a project. These are only here as a reminder for myself. All the configuration needs to be done and versions need adjustment if necessary.
I won&rsquo;t use all of them in all project but more picking the one I need from this list.
So here it is with quick commenet explaining each of them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># change it to your current version</span>
</span><span class='line'><span class="c1">#ruby &#39;1.9.3&#39;</span>
</span><span class='line'><span class="c1">#gem &#39;rails&#39;, &#39;3.2.16&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#authentification system</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;authlogic&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># OAuth 2.0 Provider, for secruing your API</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;doorkeeper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># SMS</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;twilio-ruby&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Authorization Gem</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;cancan&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># API views</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rabl&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Rails 4 strong parameters</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;strong_parameters&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># your controllers inherit all restful actions so you just have to focus on what is important.</span>
</span><span class='line'><span class="n">inherited_resources</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Oauth2 client </span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;omniauth&#39;</span>
</span><span class='line'><span class="c1"># facebook API client </span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;fb_graph&#39;</span>
</span><span class='line'><span class="c1"># Oauth2 facebook client</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;omniauth-facebook&#39;</span>
</span><span class='line'><span class="c1"># Oauth2 twitter client</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;omniauth-twitter&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># static pages</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;high_voltage&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#file management</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;paperclip&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 3.1.3&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># file storage amazon s3</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;aws-s3&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;aws-sdk&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># easy rest request</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;rest-client&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#pagination</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;will_paginate&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.0&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#passing rails variable to js</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;gon&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># synh assets to S3</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;asset_sync&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># admin panel</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;activeadmin&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># transaltion gem</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;phrase&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#better sql logging</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;hirb&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># better active record print</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;awesome_print&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:assets</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;sass-rails&#39;</span><span class="p">,</span>   <span class="s1">&#39;~&gt; 3.2.3&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;coffee-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.2.1&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># See https://github.com/sstephenson/execjs#readme for more supported runtimes</span>
</span><span class='line'>  <span class="c1"># gem &#39;therubyracer&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;uglifier&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 1.0.3&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Speeds up your Rails 3 assets:precompile</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;turbo-sprockets-rails3&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># get the chrome DevTool RailsPanem</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;meta_request&#39;</span>
</span><span class='line'>  <span class="c1"># guard to automate background tasks on file changes</span>
</span><span class='line'>  <span class="c1"># see railscast episode 264</span>
</span><span class='line'>  <span class="c1"># gem &#39;rb-fsevent&#39;, :require =&gt; false if RUBY_PLATFORM =~ /darwin/i</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-rspec&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-livereload&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span><span class="p">,</span> <span class="ss">:darwin</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rb-fsevent&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;zeus&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Acceptance test framework</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span>  <span class="s2">&quot;git://github.com/jnicklas/capybara.git&quot;</span>
</span><span class='line'>  <span class="c1"># Behaviour driven developement</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;cucumber-rails&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>  <span class="c1"># ensure a clean state for testing</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;database_cleaner&#39;</span>
</span><span class='line'>  <span class="c1"># easy factories</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;factory_girl_rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;shoulda&#39;</span>
</span><span class='line'>  <span class="c1"># helper for creating lorem ipsum</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;lorem-ipsum&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:production</span><span class="p">,</span> <span class="ss">:staging</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># postgresql</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;pg&#39;</span>
</span><span class='line'>  <span class="c1"># Use unicorn as the app server</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;unicorn&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:production</span><span class="p">,</span> <span class="ss">:staging</span><span class="p">,</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># scheduled cron jobs</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;whenever&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Application Performance Monitoring</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;newrelic_rpm&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># memcache</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;dalli&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># better fragment caching</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;cache_digests&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I will edit this post if I feel the need in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sign a pdf contract on mac in 30 seconds]]></title>
    <link href="http://loicginoux.github.io/blog/2014/02/27/sign-a-pdf-contract-on-mac-in-30-seconds/"/>
    <updated>2014-02-27T10:17:03+01:00</updated>
    <id>http://loicginoux.github.io/blog/2014/02/27/sign-a-pdf-contract-on-mac-in-30-seconds</id>
    <content type="html"><![CDATA[<p>How did I miss this for so long? I finally found the easiest and free way to sign pdf contract on mac with Preview. It will only require a webcam.</p>

<!-- more -->


<p>These are the steps:</p>

<ol>
<li>Open your document with Preview.</li>
<li>Go to Tools > Annotate > Signature</li>
<li>Click on &ldquo;Create Signature from FaceTime camera&rdquo;</li>
<li>Put in front of your camera a white paper with your signature. When you signature get recognized, accept it.</li>
<li>Click anywhere on your document to add the signature.</li>
<li>That&rsquo;s it! Save your document.</li>
<li>Your signature will be registered in Preview for the next contract</li>
</ol>


<p>Wasn&rsquo;t that easy?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joining the greaaat network]]></title>
    <link href="http://loicginoux.github.io/blog/2014/02/17/joining-the-greaaat-network/"/>
    <updated>2014-02-17T13:35:11+01:00</updated>
    <id>http://loicginoux.github.io/blog/2014/02/17/joining-the-greaaat-network</id>
    <content type="html"><![CDATA[<p>A quick note to say that I joined a network of french freelancers called <a href="http://www.greaaat.com">greaaat</a>, and you know what? It looks&hellip;. promising!</p>

<!-- more -->


<p>That was exactly the kind of network I was looking for. I think that&rsquo;s a really good idea. As a freelancer you are usually by yourself when you are looking for answers or guidance, and usually Google is your best friend in this case (quit sad isn&rsquo;t it?).</p>

<p>Anyway, this kind of network is good for both clients and freelancers. As a client, you are sure to find a freelancer available and if your project is growing and you need different type of skills you will find that with greaaat. There are all type of skills in the network. As a freelancer,  you can find and share all type of resources or questions. We also share our clients. When you get contacted for a work you cannot do, there will be a freelancer in greaaat available and the same goes the other way too when you get a period without much work.</p>

<p>The creator of the network, <a href="http://jonathanpath.com/">Jonathan Path</a>, has good ideas of other websites to help freelancers and I will be happy to help if I can. That means that I will probably write few blog post about freelancing on its website. We will see what come next but I feel like it&rsquo;s a beginning of a new adventure :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git commands to remember ]]></title>
    <link href="http://loicginoux.github.io/blog/2014/02/10/git-commands-to-remember/"/>
    <updated>2014-02-10T13:42:32+01:00</updated>
    <id>http://loicginoux.github.io/blog/2014/02/10/git-commands-to-remember</id>
    <content type="html"><![CDATA[<p>Even if I use git everyday, I don&rsquo;t always remember the exact commands to do some git actions. This is few notes I like to have close when I need them.</p>

<!-- more -->


<h2>Saving work in progress in a specific branch</h2>

<p>When you need to make a quick change on another branch, you don&rsquo;t need to commit anything on your current branch, use &lsquo;stash&rsquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git stash
</span><span class='line'>git stash list <span class="c"># list all stash</span>
</span><span class='line'>git stash apply <span class="c"># apply last stash work</span>
</span><span class='line'>git stash drop <span class="c">#remove it</span>
</span></code></pre></td></tr></table></div></figure>


<h2>When merging conflicts happen, use your local or remote version of the code</h2>

<p>In case of conflicts, you sometimes Â know which version of the file is the correct one, you don&rsquo;t need to go into the code and solve manually the conflicts, you can do directly something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout --ours index.html
</span><span class='line'>git checkout --theirs _layouts/default.html
</span></code></pre></td></tr></table></div></figure>


<p>You should note that these options are only in Git versions 1.6.1 and up. If you have an older version and donât feel like upgrading, thereâs ways to get around this. To emulate &mdash;theirs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git reset -- _layouts/default.html
</span><span class='line'>git checkout MERGE_HEAD -- _layouts/default.html
</span></code></pre></td></tr></table></div></figure>


<p>And for &mdash;ours:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git reset -- index.html
</span><span class='line'>git checkout ORIG_HEAD -- index.html
</span></code></pre></td></tr></table></div></figure>


<p>Of course, once youâve got the conflicts worked out, git add whatever changes need to be added in, and git commit away.</p>

<h2>Customise your git log by adding the branch graphs</h2>

<p>I usually use this log trick to see my git logs. I find it clearer. Â First put this in your git config file Â ~/.gitconfig:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span><span class="nb">alias</span><span class="o">]</span>
</span><span class='line'><span class="nv">lg1</span> <span class="o">=</span> log --graph --abbrev-commit --decorate --date<span class="o">=</span>relative --format<span class="o">=</span>format:<span class="s1">&#39;%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)&#39;</span> --all
</span><span class='line'>
</span><span class='line'><span class="nv">lg2</span> <span class="o">=</span> log --graph --abbrev-commit --decorate --format<span class="o">=</span>format:<span class="s1">&#39;%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n&#39;&#39; %C(white)%s%C(reset) %C(dim white)- %an%C(reset)&#39;</span> --all
</span><span class='line'>
</span><span class='line'><span class="nv">lg</span> <span class="o">=</span> !<span class="s2">&quot;git lg1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>you will see clearer the different branches when logging using git lg1 or git lg2.</p>

<h2>Commit and add only certain changes of a file</h2>

<p>Sometimes, in the case of a really big file for example, we modify it on different points for different features or bugs. If you only want to git add few modifications use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add -p file
</span></code></pre></td></tr></table></div></figure>


<p>You will then be asked to choose which modifications of he file to add.</p>

<h2>changing a commit message from an old commit</h2>

<p>This works only if you haven&rsquo;t pushed to the remote repository. Let say we want to change the third last commit we did:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git rebase -i HEAD~3
</span></code></pre></td></tr></table></div></figure>


<p>change the word &lsquo;pick&rsquo; by Â &#8217;edit&#8217; Â and save. Â then:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git commit --amend
</span></code></pre></td></tr></table></div></figure>


<p>you can now change the commit message.</p>

<p>and finally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git rebase --continue
</span></code></pre></td></tr></table></div></figure>


<p>that&rsquo;s it. If you want toÂ change a commit message of the most recent (unpushed) commit, you can simply use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git commit --amend -m <span class="s1">&#39;new message&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>pass all change on a branch to another branch</h2>

<p>I usually do that on master branch when I finished a feature that is on &lsquo;featureX&rsquo; branch. Be sure that master branch hasn&rsquo;t changed since you started working on your branch featureX</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout featureX
</span><span class='line'>git merge -s ours master
</span><span class='line'>git checkout master
</span><span class='line'>git merge featureX
</span></code></pre></td></tr></table></div></figure>


<p>all changes will be passed to master this way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About this and the lost of the context ]]></title>
    <link href="http://loicginoux.github.io/blog/2013/08/12/about-this-and-the-lost-of-the-context/"/>
    <updated>2013-08-12T15:17:28+02:00</updated>
    <id>http://loicginoux.github.io/blog/2013/08/12/about-this-and-the-lost-of-the-context</id>
    <content type="html"><![CDATA[<p>As a javascript developer you will at one time or another find the common problem where you have something undefined because the <em>this</em> refers to the global window object.</p>

<!-- more -->


<p>Let see an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">MyObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Loic&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nx">hello</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Hello I&#39;m &quot;</span> <span class="o">%</span><span class="mi">2</span><span class="nx">B</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'> <span class="p">},</span>
</span><span class='line'> <span class="nx">getName</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyObject</span><span class="p">.</span><span class="nx">hello</span><span class="p">();</span>       <span class="c1">// alert &quot;Hello I&#39;m Loic&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="nx">MyObject</span><span class="p">.</span><span class="nx">hello</span><span class="p">;</span>
</span><span class='line'><span class="nx">hello</span><span class="p">();</span>   <span class="c1">// alert &quot;Hello I&#39;m &quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">MyObject</span><span class="p">.</span><span class="nx">hello</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span> <span class="c1">// alert &quot;Hello I&#39;m &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what we see is that the <em>this.name</em> is not known in the last two run. Why that?
This is because <em>this</em> refers to the context the function is run on, it is determined at the time the function is executed.</p>

<p>So when you call a function using <em>MyObject.hello()</em>, âthisâ is the MyObject object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">MyObject</span><span class="p">.</span><span class="nx">hello</span><span class="p">();</span>       <span class="c1">// this is directly the MyObject</span>
</span></code></pre></td></tr></table></div></figure>


<p>But you loose the context of the original object if you take a reference to the function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="nx">MyObject</span><span class="p">.</span><span class="nx">hello</span><span class="p">;</span>
</span><span class='line'><span class="nx">hello</span><span class="p">();</span>   <span class="c1">// hello is a reference to the function so it will loose the original context</span>
</span><span class='line'>
</span><span class='line'><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">MyObject</span><span class="p">.</span><span class="nx">hello</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span> <span class="c1">// inside the setTimout function, the function is a reference variable too</span>
</span></code></pre></td></tr></table></div></figure>


<p>The solution is to manually tell javascript that we want the <em>this</em> to refer to a particular object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="nx">MyObject</span><span class="p">.</span><span class="nx">hello</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">hello</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">MyObject</span><span class="p">);</span>   <span class="c1">// &quot;apply&quot; run the function at his left with the this referring to his first argument.</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">MyObject</span><span class="p">.</span><span class="nx">hello</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">MyObject</span><span class="p">),</span> <span class="mi">1000</span><span class="p">);</span> <span class="c1">// &quot;bind&quot; returns the function but during execution, it will apply the context of the object passed in his first parameter.</span>
</span></code></pre></td></tr></table></div></figure>


<p>I know about this and I usually correct the error directly when it occurs, but I had to write it down to be able to explain it and put it in words. Now that <em>this</em> is explained, I shouldnât wait for the error to come up and fix but see directly when I will loose the context and fix it straight away.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My check-list to make performance improvement to a Rails app]]></title>
    <link href="http://loicginoux.github.io/blog/2013/07/12/my-check-list-to-make-performance-improvement-to-a-rails-app/"/>
    <updated>2013-07-12T14:50:04+02:00</updated>
    <id>http://loicginoux.github.io/blog/2013/07/12/my-check-list-to-make-performance-improvement-to-a-rails-app</id>
    <content type="html"><![CDATA[<p>In a recent project, I had to make the app faster. I could work on both the front end and the back-end. The is an unordered list but you should first know where is your bottleneck in your app with the help of tools like the webkit debug tool, pageSpeed or an app like New Relic. Learning how to find the bottleneck on an app is not the matter of this post. I just list here few things not to forget if you want your app to be a bit optimized.
Letâs see that.</p>

<!-- more -->


<h2>Back-end</h2>

<p>- use of a<strong> content delivery network</strong> to serve your static files. I am confortable with the config Amazon S3 %2B Amazon Cloudfront. This will help relieving your server from serving this never changing css, image and js files. these gem will help:&nbsp;<a href="https://github.com/rumblelabs/asset_sync">asset_sync</a>, <a href="https://github.com/marcel/aws-s3">aws-s3</a>, <a href="https://github.com/aws">aws-sdk</a></p>

<p>- use of <a href="http://guides.rubyonrails.org/caching_with_rails.html">cache</a>. Rails makes it really easy to <strong>cache</strong> things. The <a href="https://github.com/mperham/dalli">Dalli</a> gem is really easy to use. Depending on your app, you can cache at different levels, Page caching, Action caching, fragment caching or request caching. Take a look at what page, action, request is used a lot and donât change too often and cache it.</p>

<p>- use of <strong>database indexes</strong>. There are really important for your database complicated queries. <a href="http://www.percona.com/resources/technical-presentations/mysql-indexing-percona-mysql-university-buenos-aires-argentina">this</a> will explain everything.</p>

<p>- Add a<strong> cache control header</strong> or expires. This will help cache assets in your userâs browser.</p>

<p>- <strong>avoid redirect</strong></p>

<p>- do you use &nbsp;<a href="http://railscasts.com/episodes/22-eager-loading">eager loading</a>? in Rails be careful with the <strong>N+1 queries problem</strong>. itâs a really easy one fix.</p>

<p>- when querying the db, only <strong>select the attributes you need</strong>. You donât need to load the whole user table if you just display their username for example.</p>

<p>&ndash;<strong> increase concurrency</strong> on your app. I use the server <a href="https://devcenter.heroku.com/articles/rails-unicorn">Unicorn</a> for that, and it integrates well with Heroku.</p>

<p>- Use of <strong>background tasks</strong> for things like sending emails, reporting, etcâ¦ This is also useful in the case where you delete an item that will automatically delete all his associated objects. If you have thousands or millions of them, you canât let the user wait for the task to delete all objects. Delete the first object and delete associated objects in background. &nbsp;<a href="http://mperham.github.io/sidekiq/">sidekick</a> or <a href="https://github.com/collectiveidea/delayed_job">delayed_job</a> will work for that.</p>

<p>- <strong>NoSQL database</strong> and solutions like mongoDB will scale out more easily but have some downside. check out <a href="http://blog.sphereinc.com/2012/03/pros-and-cons-of-using-nosql-solutions/">this article</a></p>

<p>- Create some <a href="http://www.postgresql.org/docs/current/static/ddl-partitioning.html">partition tables</a> when a db table can potentially contains a lot of rows.</p>

<p>- sometimes itâs better to create a redundant attribute or table. For example in a db with a Post table and a Comment table, if you have millions of comments and you need to count the number of comments for an article, you would better have a nb_comments column on the Article table rather that counting it every time. Another example with the same tables Posts/Comments. If you need to display a page for an article that list the number of &nbsp;comments grouped &nbsp;per day. You would better create a third table StatCommentsArticle that would contain a article_id, a date and a nb_comments. These techniques will increase speed but you need to be carefull with data consistency when creating/modifying/deleting a comment.</p>

<p>If you want to see some of these techniques in action, check the small application I made. You can find it <a href="https://github.com/loicginoux/rails_performance_test">here</a> on my github account.</p>

<h2>Front-end</h2>

<p>- <strong>minify</strong> javascript, css, and html to save some bandwidth.</p>

<p>- <strong>minimize http requests</strong>. To do that, first concatenate your js files and serve only one js file and do the same for css. Then for images used in css background, make them <a href="http://www.base64-image.de/">base64</a></p>

<p>- serve <strong>gzip compressed</strong> javascript and css files. You probably need to configure both Rails and your server.</p>

<p>- serve <strong>right size images</strong>. You donât need to serve a 1280 * 960 image for a 340 * 260 img tag.</p>

<p>- specify the width and height attribute on the img tag so that the browser doesnât resize it.</p>

<p>- keep your html code as simple as possible.</p>

<p>- make your css rules as simple as possible.</p>

<p>- use <strong>Css sprites</strong> when possible.</p>

<p>- donât use css @import</p>

<p>- lazy load images. The images that are not in the viewport (directly visible) can be loaded when scrolled down. see <a href="http://www.appelsiini.net/projects/lazyload">this plugin</a></p>

<p>- stylesheet on top of html page and javascript at bottom.</p>

<p>- when using third-party javascript library, use a CDN.</p>

<p>- <strong>defer</strong> or load javascript files asynchronously. <a href="http://www.sitepoint.com/non-blocking-async-defer/">more</a></p>

<p>- use <strong>ajax</strong> when possible. if you just need to update a small part of the page, why reloading the whole page?</p>

<p>- iframes are bad! There are just blocking the page onload.</p>

<p>- <strong>minimize DOM access</strong> in javascript. try improving the way you manipulate the DOM and see if you can group your modification in fewer &nbsp;ones.</p>

<p>- <strong>optimize your images</strong>. I discovered recently a really good tool for that. <a href="http://www.macroplant.com/adapter/">Adapter</a>. You can also include this in your automation tool like grunt with <a href="https://github.com/gruntjs/grunt-contrib-imagemin">imagemin</a></p>

<p>If youâve applied all of these points in your app, you should see quite an improvement. You will then be happy like when you were young and doing some tuning to your scooter to make it goes at what.. 100-110Km/h (in the down slope and with wind behind you). Where you not happy at this moment?!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pros and cons of Test Driven Development]]></title>
    <link href="http://loicginoux.github.io/blog/2013/06/07/pros-and-cons-of-test-driven-development/"/>
    <updated>2013-06-07T14:18:29+02:00</updated>
    <id>http://loicginoux.github.io/blog/2013/06/07/pros-and-cons-of-test-driven-development</id>
    <content type="html"><![CDATA[<p>I won&rsquo;t tell you again that testing your app is important, you know that, right? I was asked this question recently and I think it&rsquo;s worth sharing it here.</p>

<!-- more -->


<h1>PROS:</h1>

<ol>
<li>It is first a <strong>safety net</strong>. All the existing code is tested. As human programmers we make mistakes and when we change or improve a code, TDD will allow us to spot our bugs quicker.</li>
<li>It can serve as <strong>documentation for new developers</strong>, it helps understanding what is the purpose of each piece of code. but it&rsquo;s definitely not enough as documentation (see cons 1)!</li>
<li>It helps to improve and <strong>debug legacy code</strong>. You never remember what this piece of code you wrote a year ago (or even a month ago) was meant to do.</li>
<li>It seems paradoxical because you write more code at the end but the <strong>overall cost of the app is reduced</strong>. You will gain time on the long-term for debugging and finding what&rsquo;s wrong with your code. (see related cons 2)</li>
<li>By writing tests first, you need to focus and think first on the code you are going to implement. It allows for more decoupled, clean and simple code (KISS principle). It pushes to <strong>write good code design</strong>.</li>
</ol>


<h1>CONS:</h1>

<ol>
<li>Unit tests are a kind of documentation but there are <strong>not a substitute for a documentation</strong>, this will sure help understanding the code but it is not enough. It is neither a substitute for integration testing.</li>
<li>Even if the overall cost is reduced, you will have <strong>more up front costs</strong> because you will need to write more code and unit tests before getting something ready.</li>
<li>Writing good maintainable and reusable tests is <strong>not easy and requires practice</strong>. You have to know what to test, when not to test something. For example if you write unit test at a level too low, future small changes on your code will break your test and you will end up spending too much time on rewriting your tests.</li>
<li>It is a good practice and a first step for a reliable application but this is <strong>not enough as an overall testing tool</strong>. Unit testing (and also integration testing) are only test and cases that the programmer thought about when writing it. In real conditions, with users who have different support, versions, configurations, there will always be a bug that you didn&rsquo;t think about. So <strong>beta testing is also important</strong> to do to try minimise the amount of bugs on your app.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to run page specific javascript on Rails]]></title>
    <link href="http://loicginoux.github.io/blog/2013/05/18/how-to-run-page-specific-javascript-on-rails/"/>
    <updated>2013-05-18T13:58:34+02:00</updated>
    <id>http://loicginoux.github.io/blog/2013/05/18/how-to-run-page-specific-javascript-on-rails</id>
    <content type="html"><![CDATA[<p>In Ruby on Rails, all your javascript is available everywhere, but we always want to run some javascript only on certain pages.  This is how I manage to run and compartiment my javascript code based on models and actions.</p>

<!-- more -->


<p>First you need to add to your html layout a way for javascript to detect which model and which action the page is rendering:</p>

<figure class='code'><figcaption><span>app/views/layouts/application.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body</span> <span class="na">data-controller=</span><span class="s">&quot;&lt;%= controller_name %&gt;&quot;</span> <span class="na">data-action=</span><span class="s">&quot;&lt;%= action_name %&gt;&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in your main javascript file:</p>

<figure class='code'><figcaption><span>app/assets/application.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require jquery</span>
</span><span class='line'><span class="c1">//= require jquery_ujs</span>
</span><span class='line'><span class="c1">//= require ./init</span>
</span><span class='line'><span class="c1">//= require ./utils</span>
</span><span class='line'><span class="c1">// = require_tree ./ressources</span>
</span></code></pre></td></tr></table></div></figure>


<p>We define the code that will be run on every page at initialisation:</p>

<figure class='code'><figcaption><span>app/assets/init.js </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// init your global app object</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// you need to add your controllers here to not throw an error</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// when calling the exec function from the utils.js file</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">YOUR_APP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">common</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="nx">users</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="nx">another_controller</span><span class="o">:</span><span class="p">{}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">YOUR_APP</span><span class="p">.</span><span class="nx">common</span><span class="p">.</span><span class="nx">init</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;this will run on every page&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I usually add a UTIL object where I put my utilities functions, for this example, there are two functions that interest us &ldquo;init&rdquo; and &ldquo;exec&rdquo;:</p>

<figure class='code'><figcaption><span>app/assets/utils.js </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nb">window</span><span class="p">.</span><span class="nx">UTIL</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// execute the corresponding function</span>
</span><span class='line'>  <span class="nx">exec</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">controller</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">ns</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">YOUR_APP</span><span class="p">;</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">action</span><span class="p">){</span>
</span><span class='line'>     <span class="kd">var</span> <span class="nx">action</span> <span class="o">=</span> <span class="s2">&quot;init&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span> <span class="nx">controller</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">ns</span><span class="p">[</span><span class="nx">controller</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">ns</span><span class="p">[</span><span class="nx">controller</span><span class="p">][</span><span class="nx">action</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;function&quot;</span> <span class="p">){</span>
</span><span class='line'>     <span class="nx">ns</span><span class="p">[</span><span class="nx">controller</span><span class="p">][</span><span class="nx">action</span><span class="p">]();</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// run on every page load to init the javascript calls</span>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">controller</span> <span class="o">=</span> <span class="nx">body</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&quot;data-controller&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">action</span> <span class="o">=</span> <span class="nx">body</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&quot;data-action&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">UTIL</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="s2">&quot;common&quot;</span><span class="p">)</span> <span class="c1">//run common.init</span>
</span><span class='line'>    <span class="nx">UTIL</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">controller</span><span class="p">)</span> <span class="c1">//run controller.init</span>
</span><span class='line'>    <span class="nx">UTIL</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">controller</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="c1">//run controller.action</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//run the init function</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="nb">document</span> <span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="nx">UTIL</span><span class="p">.</span><span class="nx">init</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then inside my directory app/assets/ressources I have one js file per model with for example for the user model something like that:</p>

<figure class='code'><figcaption><span>app/assets/ressources/user.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">YOUR_APP</span><span class="p">.</span><span class="nx">users</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;this code run on all pages for user&#39;s action&quot;</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">index</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;this code run only on the user index page&quot;</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">view</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;this code run only on the user view page&quot;</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">edit</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;this code run only on the user edit page&quot;</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">show</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;this code run only on the user show page&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope this will be useful for those who are looking for a solution. It&rsquo;s not the best but it works and gets things separated.</p>
]]></content>
  </entry>
  
</feed>
