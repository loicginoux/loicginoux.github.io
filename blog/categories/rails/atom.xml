<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Loic Ginoux Blog]]></title>
  <link href="http://loicginoux.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://loicginoux.github.io/"/>
  <updated>2014-03-15T23:24:18+01:00</updated>
  <id>http://loicginoux.github.io/</id>
  <author>
    <name><![CDATA[Loïc Ginoux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gemfile bootstrap]]></title>
    <link href="http://loicginoux.github.io/blog/2014/02/28/gemfile-bootstrap/"/>
    <updated>2014-02-28T10:47:27+01:00</updated>
    <id>http://loicginoux.github.io/blog/2014/02/28/gemfile-bootstrap</id>
    <content type="html"><![CDATA[<p>I will just keep here a list of gems I like to use in my Ruby on Rails projects.</p>

<!-- more -->


<p>There are so many good gems out there I usually forget some of them when starting a project. These are only here as a reminder for myself. All the configuration needs to be done and versions need adjustment if necessary.
I won&rsquo;t use all of them in all project but more picking the one I need from this list.
So here it is with quick commenet explaining each of them:</p>

<p>``` ruby
source &lsquo;<a href="https://rubygems.org">https://rubygems.org</a>&rsquo;</p>

<h1>change it to your current version</h1>

<h1>ruby &lsquo;1.9.3&rsquo;</h1>

<h1>gem &lsquo;rails&rsquo;, &lsquo;3.2.16&rsquo;</h1>

<h1>authentification system</h1>

<p>gem &lsquo;authlogic&rsquo;</p>

<h1>OAuth 2.0 Provider, for secruing your API</h1>

<p>gem &lsquo;doorkeeper&rsquo;</p>

<h1>SMS</h1>

<p>gem &lsquo;twilio-ruby&rsquo;</p>

<h1>Authorization Gem</h1>

<p>gem &ldquo;cancan&rdquo;</p>

<h1>API views</h1>

<p>gem &lsquo;rabl&rsquo;</p>

<h1>Rails 4 strong parameters</h1>

<p>gem &lsquo;strong_parameters&rsquo;</p>

<h1>Oauth2 client</h1>

<p>gem &lsquo;omniauth&rsquo;</p>

<h1>facebook API client</h1>

<p>gem &lsquo;fb_graph&rsquo;</p>

<h1>Oauth2 facebook client</h1>

<p>gem &lsquo;omniauth-facebook&rsquo;</p>

<h1>Oauth2 twitter client</h1>

<p>gem &lsquo;omniauth-twitter&rsquo;</p>

<h1>static pages</h1>

<p>gem &ldquo;high_voltage&rdquo;</p>

<h1>file management</h1>

<p>gem &ldquo;paperclip&rdquo;, &ldquo;~> 3.1.3&rdquo;</p>

<h1>file storage amazon s3</h1>

<p>gem &lsquo;aws-s3&rsquo;
gem &lsquo;aws-sdk&rsquo;</p>

<h1>easy rest request</h1>

<p>gem &ldquo;rest-client&rdquo;</p>

<h1>pagination</h1>

<p>gem &lsquo;will_paginate&rsquo;, &lsquo;~> 3.0&rsquo;</p>

<h1>passing rails variable to js</h1>

<p>gem &lsquo;gon&rsquo;</p>

<h1>synh assets to S3</h1>

<p>gem &ldquo;asset_sync&rdquo;</p>

<h1>admin panel</h1>

<p>gem &lsquo;activeadmin&rsquo;</p>

<h1>transaltion gem</h1>

<p>gem &lsquo;phrase&rsquo;</p>

<h1>better sql logging</h1>

<p>gem &ldquo;hirb&rdquo;</p>

<h1>better active record print</h1>

<p>gem &ldquo;awesome_print&rdquo;</p>

<p>group :assets do
  gem &lsquo;sass-rails&rsquo;,   &lsquo;~> 3.2.3&rsquo;
  gem &lsquo;coffee-rails&rsquo;, &lsquo;~> 3.2.1&rsquo;</p>

<p>  # See <a href="https://github.com/sstephenson/execjs#readme">https://github.com/sstephenson/execjs#readme</a> for more supported runtimes
  # gem &lsquo;therubyracer&rsquo;</p>

<p>  gem &lsquo;uglifier&rsquo;, &lsquo;>= 1.0.3&rsquo;</p>

<p>  # Speeds up your Rails 3 assets:precompile
  gem &lsquo;turbo-sprockets-rails3&rsquo;
end</p>

<p>group :development do
  # get the chrome DevTool RailsPanem
  gem &lsquo;meta_request&rsquo;
  # guard to automate background tasks on file changes
  # see railscast episode 264
  # gem &lsquo;rb-fsevent&rsquo;, :require => false if RUBY_PLATFORM =~ /darwin/i
  gem &lsquo;guard&rsquo;
  gem &lsquo;guard-rspec&rsquo;
  gem &lsquo;guard-livereload&rsquo;
end</p>

<p>group :test, :darwin do
  gem &lsquo;rb-fsevent&rsquo;
end</p>

<p>group :development, :test do
  gem &lsquo;zeus&rsquo;
end</p>

<p>group :test do
  # Acceptance test framework
  gem &lsquo;capybara&rsquo;, :git =>  &ldquo;git://github.com/jnicklas/capybara.git&rdquo;
  # Behaviour driven developement
  gem &lsquo;cucumber-rails&rsquo;, :require => false
  # ensure a clean state for testing
  gem &lsquo;database_cleaner&rsquo;
  # easy factories
  gem &lsquo;factory_girl_rails&rsquo;
  gem &lsquo;shoulda&rsquo;
  # helper for creating lorem ipsum
  gem &ldquo;lorem-ipsum&rdquo;</p>

<p>end</p>

<p>group :production, :staging do
  # postgresql
  gem &lsquo;pg&rsquo;
  # Use unicorn as the app server
  gem &lsquo;unicorn&rsquo;
end</p>

<p>group :production, :staging, :development do</p>

<p>  # scheduled cron jobs
  gem &lsquo;whenever&rsquo;, :require => false</p>

<p>  # Application Performance Monitoring
  gem &lsquo;newrelic_rpm&rsquo;</p>

<p>  # memcache
  gem &lsquo;dalli&rsquo;</p>

<p>  # better fragment caching
  gem &lsquo;cache_digests&rsquo;
end</p>

<p>```</p>

<p>I will edit this post if I feel the need in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My check-list to make performance improvement to a Rails app]]></title>
    <link href="http://loicginoux.github.io/blog/2013/07/12/my-check-list-to-make-performance-improvement-to-a-rails-app/"/>
    <updated>2013-07-12T14:50:04+02:00</updated>
    <id>http://loicginoux.github.io/blog/2013/07/12/my-check-list-to-make-performance-improvement-to-a-rails-app</id>
    <content type="html"><![CDATA[<p>In a recent project, I had to make the app faster. I could work on both the front end and the back-end. The is an unordered list but you should first know where is your bottleneck in your app with the help of tools like the webkit debug tool, pageSpeed or an app like New Relic. Learning how to find the bottleneck on an app is not the matter of this post. I just list here few things not to forget if you want your app to be a bit optimized.
Let’s see that.</p>

<!-- more -->


<h2>Back-end</h2>

<p>- use of a<strong> content delivery network</strong> to serve your static files. I am confortable with the config Amazon S3 %2B Amazon Cloudfront. This will help relieving your server from serving this never changing css, image and js files. these gem will help:&nbsp;<a href="https://github.com/rumblelabs/asset_sync">asset_sync</a>, <a href="https://github.com/marcel/aws-s3">aws-s3</a>, <a href="https://github.com/aws">aws-sdk</a></p>

<p>- use of <a href="http://guides.rubyonrails.org/caching_with_rails.html">cache</a>. Rails makes it really easy to <strong>cache</strong> things. The <a href="https://github.com/mperham/dalli">Dalli</a> gem is really easy to use. Depending on your app, you can cache at different levels, Page caching, Action caching, fragment caching or request caching. Take a look at what page, action, request is used a lot and don’t change too often and cache it.</p>

<p>- use of <strong>database indexes</strong>. There are really important for your database complicated queries. <a href="http://www.percona.com/resources/technical-presentations/mysql-indexing-percona-mysql-university-buenos-aires-argentina">this</a> will explain everything.</p>

<p>- Add a<strong> cache control header</strong> or expires. This will help cache assets in your user’s browser.</p>

<p>- <strong>avoid redirect</strong></p>

<p>- do you use &nbsp;<a href="http://railscasts.com/episodes/22-eager-loading">eager loading</a>? in Rails be careful with the <strong>N+1 queries problem</strong>. it’s a really easy one fix.</p>

<p>- when querying the db, only <strong>select the attributes you need</strong>. You don’t need to load the whole user table if you just display their username for example.</p>

<p>&ndash;<strong> increase concurrency</strong> on your app. I use the server <a href="https://devcenter.heroku.com/articles/rails-unicorn">Unicorn</a> for that, and it integrates well with Heroku.</p>

<p>- Use of <strong>background tasks</strong> for things like sending emails, reporting, etc… This is also useful in the case where you delete an item that will automatically delete all his associated objects. If you have thousands or millions of them, you can’t let the user wait for the task to delete all objects. Delete the first object and delete associated objects in background. &nbsp;<a href="http://mperham.github.io/sidekiq/">sidekick</a> or <a href="https://github.com/collectiveidea/delayed_job">delayed_job</a> will work for that.</p>

<p>- <strong>NoSQL database</strong> and solutions like mongoDB will scale out more easily but have some downside. check out <a href="http://blog.sphereinc.com/2012/03/pros-and-cons-of-using-nosql-solutions/">this article</a></p>

<p>- Create some <a href="http://www.postgresql.org/docs/current/static/ddl-partitioning.html">partition tables</a> when a db table can potentially contains a lot of rows.</p>

<p>- sometimes it’s better to create a redundant attribute or table. For example in a db with a Post table and a Comment table, if you have millions of comments and you need to count the number of comments for an article, you would better have a nb_comments column on the Article table rather that counting it every time. Another example with the same tables Posts/Comments. If you need to display a page for an article that list the number of &nbsp;comments grouped &nbsp;per day. You would better create a third table StatCommentsArticle that would contain a article_id, a date and a nb_comments. These techniques will increase speed but you need to be carefull with data consistency when creating/modifying/deleting a comment.</p>

<p>If you want to see some of these techniques in action, check the small application I made. You can find it <a href="https://github.com/loicginoux/rails_performance_test">here</a> on my github account.</p>

<h2>Front-end</h2>

<p>- <strong>minify</strong> javascript, css, and html to save some bandwidth.</p>

<p>- <strong>minimize http requests</strong>. To do that, first concatenate your js files and serve only one js file and do the same for css. Then for images used in css background, make them <a href="http://www.base64-image.de/">base64</a></p>

<p>- serve <strong>gzip compressed</strong> javascript and css files. You probably need to configure both Rails and your server.</p>

<p>- serve <strong>right size images</strong>. You don’t need to serve a 1280 * 960 image for a 340 * 260 img tag.</p>

<p>- specify the width and height attribute on the img tag so that the browser doesn’t resize it.</p>

<p>- keep your html code as simple as possible.</p>

<p>- make your css rules as simple as possible.</p>

<p>- use <strong>Css sprites</strong> when possible.</p>

<p>- don’t use css @import</p>

<p>- lazy load images. The images that are not in the viewport (directly visible) can be loaded when scrolled down. see <a href="http://www.appelsiini.net/projects/lazyload">this plugin</a></p>

<p>- stylesheet on top of html page and javascript at bottom.</p>

<p>- when using third-party javascript library, use a CDN.</p>

<p>- <strong>defer</strong> or load javascript files asynchronously. <a href="http://www.sitepoint.com/non-blocking-async-defer/">more</a></p>

<p>- use <strong>ajax</strong> when possible. if you just need to update a small part of the page, why reloading the whole page?</p>

<p>- iframes are bad! There are just blocking the page onload.</p>

<p>- <strong>minimize DOM access</strong> in javascript. try improving the way you manipulate the DOM and see if you can group your modification in fewer &nbsp;ones.</p>

<p>- <strong>optimize your images</strong>. I discovered recently a really good tool for that. <a href="http://www.macroplant.com/adapter/">Adapter</a>. You can also include this in your automation tool like grunt with <a href="https://github.com/gruntjs/grunt-contrib-imagemin">imagemin</a></p>

<p>If you’ve applied all of these points in your app, you should see quite an improvement. You will then be happy like when you were young and doing some tuning to your scooter to make it goes at what.. 100-110Km/h (in the down slope and with wind behind you). Where you not happy at this moment?!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to run page specific javascript on Rails]]></title>
    <link href="http://loicginoux.github.io/blog/2013/05/18/how-to-run-page-specific-javascript-on-rails/"/>
    <updated>2013-05-18T13:58:34+02:00</updated>
    <id>http://loicginoux.github.io/blog/2013/05/18/how-to-run-page-specific-javascript-on-rails</id>
    <content type="html"><![CDATA[<p>In Ruby on Rails, all your javascript is available everywhere, but we always want to run some javascript only on certain pages.  This is how I manage to run and compartiment my javascript code based on models and actions.</p>

<!-- more -->


<p>First you need to add to your html layout a way for javascript to detect which model and which action the page is rendering:</p>

<p><code>html app/views/layouts/application.html.erb
&lt;body data-controller="&lt;%= controller_name %&gt;" data-action="&lt;%= action_name %&gt;"&gt;
</code>
Then in your main javascript file:</p>

<p><code>javascript app/assets/application.js
//= require jquery
//= require jquery_ujs
//= require ./init
//= require ./utils
// = require_tree ./ressources
</code></p>

<p>We define the code that will be run on every page at initialisation:</p>

<p>``` javascript app/assets/init.js</p>

<p>// init your global app object</p>

<p>// you need to add your controllers here to not throw an error</p>

<p>// when calling the exec function from the utils.js file</p>

<p>window.YOUR_APP = {
  common: {},
  users: {},
  another_controller:{}
};</p>

<p>YOUR_APP.common.init = function() {</p>

<p>  console.log(&ldquo;this will run on every page&rdquo;);</p>

<p>}
```</p>

<p>I usually add a UTIL object where I put my utilities functions, for this example, there are two functions that interest us &ldquo;init&rdquo; and &ldquo;exec&rdquo;:</p>

<p>``` javascript app/assets/utils.js
var window.UTIL = {
  // execute the corresponding function
  exec: function (controller, action) {
   var ns = window.YOUR_APP;
   if (!action){</p>

<pre><code> var action = "init";
</code></pre>

<p>   }
   if ( controller != &ldquo;&rdquo; &amp;&amp; ns[controller] &amp;&amp; typeof ns[controller][action] == &ldquo;function&rdquo; ){</p>

<pre><code> ns[controller][action]();
</code></pre>

<p>   }
  },</p>

<p>  // run on every page load to init the javascript calls
  init: function(){</p>

<pre><code>var body = document.body;
var controller = body.getAttribute("data-controller");
var action = body.getAttribute("data-action")
UTIL.exec("common") //run common.init
UTIL.exec(controller) //run controller.init
UTIL.exec(controller, action) //run controller.action
</code></pre>

<p>  }
};</p>

<p>//run the init function
$( document ).ready(UTIL.init)</p>

<p>```
And then inside my directory app/assets/ressources I have one js file per model with for example for the user model something like that:</p>

<p><code>javascript app/assets/ressources/user.js
YOUR_APP.users = {
  init: function() { alert("this code run on all pages for user's action"); },
  index: function() { alert("this code run only on the user index page"); },
  view: function() { alert("this code run only on the user view page"); },
  edit: function() { alert("this code run only on the user edit page"); },
  show: function() { alert("this code run only on the user show page"); }
};
</code>
I hope this will be useful for those who are looking for a solution. It&rsquo;s not the best but it works and gets things separated.</p>
]]></content>
  </entry>
  
</feed>
