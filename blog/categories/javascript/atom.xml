<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Blog]]></title>
  <link href="http://loicginoux.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://loicginoux.github.io/"/>
  <updated>2014-02-26T16:55:13+01:00</updated>
  <id>http://loicginoux.github.io/</id>
  <author>
    <name><![CDATA[Loïc Ginoux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[About this and the lost of the context ]]></title>
    <link href="http://loicginoux.github.io/blog/2013/08/12/about-this-and-the-lost-of-the-context/"/>
    <updated>2013-08-12T15:17:28+02:00</updated>
    <id>http://loicginoux.github.io/blog/2013/08/12/about-this-and-the-lost-of-the-context</id>
    <content type="html"><![CDATA[<p>As a javascript developer you will at one time or another find the common problem where you have something undefined because the <em>this</em> refers to the global window object.</p>

<p>Let see an example:</p>

<p>``` javascript</p>

<pre><code>var MyObject = {
 name: "Loic",
 hello: function() {
 alert("Hello I'm " %2B this.name);
 },
 getName: function () {
  return this.name;
 }
}

MyObject.hello();       // alert "Hello I'm Loic"

var hello = MyObject.hello;
hello();   // alert "Hello I'm "

setTimeout(MyObject.hello, 1000); // alert "Hello I'm "
</code></pre>

<p>```</p>

<p>So what we see is that the <em>this.name</em> is not known in the last two run. Why that?
This is because <em>this</em> refers to the context the function is run on, it is determined at the time the function is executed.</p>

<p>So when you call a function using <em>MyObject.hello()</em>, ‘this’ is the MyObject object.</p>

<p>``` javascript
MyObject.hello();       // this is directly the MyObject</p>

<p>```</p>

<p>But you loose the context of the original object if you take a reference to the function.</p>

<p>``` javascript</p>

<pre><code>var hello = MyObject.hello;
hello();   // hello is a reference to the function so it will loose the original context

setTimeout(MyObject.hello, 1000); // inside the setTimout function, the function is a reference variable too
</code></pre>

<p>```</p>

<p>The solution is to manually tell javascript that we want the <em>this</em> to refer to a particular object.</p>

<p>``` javascript</p>

<pre><code>var hello = MyObject.hello;
hello.apply(MyObject);   // "apply" run the function at his left with the this referring to his first argument.

setTimeout(MyObject.hello.bind(MyObject), 1000); // "bind" returns the function but during execution, it will apply the context of the object passed in his first parameter.
</code></pre>

<p>```</p>

<p>I know about this and I usually correct the error directly when it occurs, but I had to write it down to be able to explain it and put it in words. Now that <em>this</em> is explained, I shouldn’t wait for the error to come up and fix but see directly when I will loose the context and fix it straight away.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to run page specific javascript on Rails]]></title>
    <link href="http://loicginoux.github.io/blog/2013/05/18/how-to-run-page-specific-javascript-on-rails/"/>
    <updated>2013-05-18T13:58:34+02:00</updated>
    <id>http://loicginoux.github.io/blog/2013/05/18/how-to-run-page-specific-javascript-on-rails</id>
    <content type="html"><![CDATA[<p>In Ruby on Rails, all your javascript is available everywhere, but we always want to run some javascript only on certain pages.  This is how I manage to run and compartiment my javascript code based on models and actions.</p>

<p>First you need to add to your html layout a way for javascript to detect which model and which action the page is rendering:</p>

<p><code>html app/views/layouts/application.html.erb
&lt;body data-controller="&lt;%= controller_name %&gt;" data-action="&lt;%= action_name %&gt;"&gt;
</code>
Then in your main javascript file:</p>

<p><code>javascript app/assets/application.js
//= require jquery
//= require jquery_ujs
//= require ./init
//= require ./utils
// = require_tree ./ressources
</code></p>

<p>We define the code that will be run on every page at initialisation:</p>

<p>``` javascript app/assets/init.js</p>

<p>// init your global app object</p>

<p>// you need to add your controllers here to not throw an error</p>

<p>// when calling the exec function from the utils.js file</p>

<p>window.YOUR_APP = {
  common: {},
  users: {},
  another_controller:{}
};</p>

<p>YOUR_APP.common.init = function() {</p>

<p>  console.log(&ldquo;this will run on every page&rdquo;);</p>

<p>}
```</p>

<p>I usually add a UTIL object where I put my utilities functions, for this example, there are two functions that interest us &ldquo;init&rdquo; and &ldquo;exec&rdquo;:</p>

<p>``` javascript app/assets/utils.js
var window.UTIL = {
  // execute the corresponding function
  exec: function (controller, action) {
   var ns = window.YOUR_APP;
   if (!action){</p>

<pre><code> var action = "init";
</code></pre>

<p>   }
   if ( controller != &ldquo;&rdquo; &amp;&amp; ns[controller] &amp;&amp; typeof ns[controller][action] == &ldquo;function&rdquo; ){</p>

<pre><code> ns[controller][action]();
</code></pre>

<p>   }
  },</p>

<p>  // run on every page load to init the javascript calls
  init: function(){</p>

<pre><code>var body = document.body;
var controller = body.getAttribute("data-controller");
var action = body.getAttribute("data-action")
UTIL.exec("common") //run common.init
UTIL.exec(controller) //run controller.init
UTIL.exec(controller, action) //run controller.action
</code></pre>

<p>  }
};</p>

<p>//run the init function
$( document ).ready(UTIL.init)</p>

<p>```
And then inside my directory app/assets/ressources I have one js file per model with for example for the user model something like that:</p>

<p><code>javascript app/assets/ressources/user.js
YOUR_APP.users = {
  init: function() { alert("this code run on all pages for user's action"); },
  index: function() { alert("this code run only on the user index page"); },
  view: function() { alert("this code run only on the user view page"); },
  edit: function() { alert("this code run only on the user edit page"); },
  show: function() { alert("this code run only on the user show page"); }
};
</code>
I hope this will be useful for those who are looking for a solution. It&rsquo;s not the best but it works and gets things separated.</p>
]]></content>
  </entry>
  
</feed>
